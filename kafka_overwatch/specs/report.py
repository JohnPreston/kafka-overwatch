# generated by datamodel-codegen:
#   filename:  report.json

from __future__ import annotations

from dataclasses import dataclass
from typing import Any, Dict, List, Optional


@dataclass
class Metadata:
    timestamp: str
    """
    Time the report was generated at
    """


@dataclass
class ConsumerGroups:
    total: int
    """
    Total number of consumer groups
    """
    active: int | None = None
    """
    Number of active consumer groups (lag = 0) & members > 0
    """
    inactive: int | None = None
    """
    Number of inactive consumer groups (lag > 0) or groups without members
    """


@dataclass
class Statistics:
    topics: int
    """
    Total count of topics counted at the time of generating the report
    """
    partitions: int | None = None
    """
    Sum of partitions for the topics
    """
    consumer_groups: ConsumerGroups | None = None


@dataclass
class EstimatedWaste:
    topics: int | None = None
    partitions: int | None = None
    """
    Sum of partitions for the topics
    """


@dataclass
class NewMessagesObserved:
    count: int
    """
    Number of new messages observed, as per offset ends changed
    """
    elapsed_time: int
    """
    Amount of time in seconds passed for the evaluation
    """


@dataclass
class Consumption:
    active_consumer_groups_count: int | None = None
    """
    Number of active consumer groups (lag = 0)
    """
    inactive_consumer_groups_count: int | None = None
    """
    Number of inactive consumer groups (lag > 0) or groups without members
    """


@dataclass
class Recommendation:
    description: str | None = None
    """
    Recommendation for the topic
    """
    suggested_actions: list[str] | None = None
    """
    List of suggested actions
    """


@dataclass
class Topic:
    partitions_count: int
    """
    Number of partitions for the topic
    """
    new_messages_observed: NewMessagesObserved
    consumption: Consumption | None = None
    recommendation: Recommendation | None = None


@dataclass
class ClusterReport:
    cluster_name: str
    metadata: Metadata
    topics: dict[str, Topic]
    topics_pd_df: Any | None = None
    statistics: Statistics | None = None
    estimated_waste: EstimatedWaste | None = None


@dataclass
class ClusterUsageReportStructure:
    """
    Defines the format of the cluster topics report
    """

    cluster: ClusterReport | None = None
